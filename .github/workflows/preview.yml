name: Preview Deployment
on:
  push:
    branches-ignore:
      - main
concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true
jobs:
  Spawn-Database-Branch:
    runs-on: ubuntu-latest
    name: Spawn Database Branch
    outputs:
      BRANCH_DATABASE: ${{ steps.branch-credentials.outputs.BRANCH_DATABASE }}
      BRANCH_HOST: ${{ steps.branch-credentials.outputs.BRANCH_HOST }}
      BRANCH_PASSWORD: ${{ steps.branch-credentials.outputs.BRANCH_PASSWORD }}
      BRANCH_ROLE: ${{ steps.branch-credentials.outputs.BRANCH_ROLE }}
    steps:
      - name: Install Neonctl
        run: |
          wget \
            --header="X-GitHub-Api-Version: 2022-11-28" \
            --header='Accept:application/octet-stream' \
            https://api.github.com/repos/unredundant/neonctl/releases/assets/109043724 \
            -O neonctl.kexe
      - name: Prep for Neonctl (Delete once bug fixed)
        run: |
          mkdir -p $HOME/.config/neonctl
          chmod +x neonctl.kexe
      - name: Initialize Neonctl
        run: ./neonctl.kexe init ${{ secrets.NEON_API_TOKEN }}
      - name: Spawn Database Branch
        run: |
          ./neonctl.kexe branch -p ${{ secrets.NEON_PROJECT_ID }} create | tee branch.json
      - name: Set Database Branch Outputs
        id: branch-credentials
        run: | 
          echo "BRANCH_DATABASE=$(jq -r '.connection_uris[0].connection_parameters.database' branch.json)" >> "$GITHUB_OUTPUT"
          echo "BRANCH_HOST=$(jq -r '.connection_uris[0].connection_parameters.host' branch.json)" >> "$GITHUB_OUTPUT"
          echo "BRANCH_PASSWORD=$(jq -r '.connection_uris[0].connection_parameters.password' branch.json)" >> "$GITHUB_OUTPUT"
          echo "BRANCH_ROLE=$(jq -r '.connection_uris[0].connection_parameters.role' branch.json)" >> "$GITHUB_OUTPUT"
  Run-Migrations:
    runs-on: ubuntu-latest
    name: Run Migrations
    needs: Spawn-Database-Branch
    env:
      DATABASE_HOST: ${{ needs.Spawn-Database-Branch.outputs.BRANCH_HOST }}
      DATABASE_NAME: ${{ needs.Spawn-Database-Branch.outputs.BRANCH_DATABASE }}
      DATABASE_ROLE: ${{ needs.Spawn-Database-Branch.outputs.BRANCH_ROLE }}
      DATABASE_PASSWORD: ${{ needs.Spawn-Database-Branch.outputs.BRANCH_PASSWORD }}
      DATABASE_SSL_MODE: require
    steps:
      - uses: actions/checkout@v3
      - name: Install Atlas
        run: curl -sSf https://atlasgo.sh | sh
      - name: Run Migrations
        run: |
          atlas migrate apply \
            --url "postgres://${{ env.DATABASE_ROLE }}:${{ env.DATABASE_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.DATABASE_NAME }}?ssl_mode=${{ env.DATABASE_SSL_MODE }}&search_path=public" \
            --dir "file://migrations?format=flyway"
  Deploy-Portfolio-Preview:
    runs-on: ubuntu-latest
    name: Portfolio
    needs:
      - Run-Migrations
      - Spawn-Database-Branch
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PORTFOLIO_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
  Deploy-Portfolio-Admin-Preview:
    runs-on: ubuntu-latest
    name: Admin
    needs:
      - Run-Migrations
      - Spawn-Database-Branch
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PORTFOLIO_ADMIN_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}