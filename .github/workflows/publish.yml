name: Vercel Production Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
on:
  push:
    branches:
      - main
concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true
jobs:
  Yoink-Database-Credentials:
    runs-on: ubuntu-latest
    name: Yoink Database Credentials
    steps:
      - name: Get Latest Neonctl Release
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/unredundant/neonctl/releases/latest \
            -o neonctl_release.json
      - name: Get Assets URL
        uses: sergeysova/jq-action@v2
        id: get_assets_url
        with:
          cmd: jq .assets_url neonctl_release.json -r
      - name: Get Assets
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${{ steps.get_assets_url.outputs.value }} \
            -o assets.json
      - name: Get Asset ID
        uses: sergeysova/jq-action@v2
        id: get_asset_id
        with:
          cmd: jq '.[] | select(.name == "neonctl-linux.kexe") | .id' assets.json -r
      - name: Install Neonctl
        run: |
          wget \
            --header="X-GitHub-Api-Version: 2022-11-28" \
            --header='Accept:application/octet-stream' \
            https://api.github.com/repos/unredundant/neonctl/releases/assets/${{ steps.get_asset_id.outputs.value }}  \
            -O neonctl.kexe
      - name: Prep for Neonctl (Delete once bug fixed)
        run: |
          mkdir -p $HOME/.config/neonctl
          chmod +x neonctl.kexe
      - name: Initialize Neonctl
        run: ./neonctl.kexe init ${{ secrets.NEON_API_TOKEN }}
      - name: Get Primary Endpoint
        run: ./neonctl.kexe project ${{ secrets.NEON_PROJECT_ID }} primary_connection_parameters | tee endpoint.json
      - name: Set Database Branch Outputs
        id: branch-credentials
        run: |
          echo "BRANCH_DATABASE=portfolio" >> "$GITHUB_OUTPUT"
          echo "BRANCH_HOST=$(jq -r '.host' endpoint.json)" >> "$GITHUB_OUTPUT"
          echo "BRANCH_PASSWORD=$(jq -r '.password' endpoint.json)" >> "$GITHUB_OUTPUT"
          echo "BRANCH_USER=$(jq -r '.role' endpoint.json)" >> "$GITHUB_OUTPUT"
  Run-Migrations:
    runs-on: ubuntu-latest
    name: Run Migrations
    needs:
      - Yoink-Database-Credentials
    env:
      DATABASE_HOST: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_HOST }}
      DATABASE_NAME: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_DATABASE }}
      DATABASE_USER: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_USER }}
      DATABASE_PASSWORD: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_PASSWORD }}
      DATABASE_SSL_MODE: require
    steps:
      - uses: actions/checkout@v3
      - name: Install Atlas
        run: curl -sSf https://atlasgo.sh | sh
      - name: Run Migrations
        run: |
          atlas migrate apply \
            --url "postgres://${{ env.DATABASE_USER }}:${{ env.DATABASE_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.DATABASE_NAME }}?ssl_mode=${{ env.DATABASE_SSL_MODE }}&search_path=public" \
            --dir "file://migrations?format=flyway"
  Deploy-Portfolio-Production:
    runs-on: ubuntu-latest
    needs:
      - Yoink-Database-Credentials
      - Run-Migrations
    name: Portfolio
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PORTFOLIO_PROJECT_ID }}
      DATABASE_HOST: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_HOST }}
      DATABASE_NAME: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_DATABASE }}
      DATABASE_USER: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_USER }}
      DATABASE_PASSWORD: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_PASSWORD }}
      DATABASE_SSL_MODE: require
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
  Deploy-Portfolio-Admin-Production:
    runs-on: ubuntu-latest
    name: Admin
    needs:
      - Yoink-Database-Credentials
      - Run-Migrations
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PORTFOLIO_ADMIN_PROJECT_ID }}
      DATABASE_HOST: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_HOST }}
      DATABASE_NAME: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_DATABASE }}
      DATABASE_USER: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_USER }}
      DATABASE_PASSWORD: ${{ needs.Yoink-Database-Credentials.outputs.BRANCH_PASSWORD }}
      DATABASE_SSL_MODE: require
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
